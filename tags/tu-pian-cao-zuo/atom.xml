<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>子十 - 图片操作</title>
    <subtitle>子十个人博客</subtitle>
    <link href="http://aqrun.com/tags/tu-pian-cao-zuo/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="http://aqrun.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2015-06-04T00:00:00+00:00</updated>
    <id>http://aqrun.com/tags/tu-pian-cao-zuo/atom.xml</id>
    <entry xml:lang="en">
        <title>仿starZoom图片移动缩放插件</title>
        <published>2015-06-04T00:00:00+00:00</published>
        <updated>2015-06-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="http://aqrun.com/frontend/fang-starzoomtu-pian-yi-dong-suo-fang-cha-jian/" type="text/html"/>
        <id>http://aqrun.com/frontend/fang-starzoomtu-pian-yi-dong-suo-fang-cha-jian/</id>
        
        <content type="html">&lt;pre class=&quot;line-numbers&quot;&gt;
    &lt;code class=&quot;language-javascript&quot;&gt;

    &#x2F;**
     * starZoom  jquery扩展
     * date: 2015-6-3
     * canvas实现 图片移动缩放 旋转 效果
     *
     * 参数可用 data-options 及 starZoom({}) 形参两种形式
     *
     * &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;
     * &amp;lt;div class=&quot;iamge_wrap&quot;&amp;gt;
     *      &amp;lt;img src=&quot;&quot; class=&quot;star_zoom&quot; data-options=&quot;{&#x27;width&#x27;:400,&#x27;height&#x27;:300}&quot;&amp;gt;
     * &amp;lt;&#x2F;div&amp;gt;
     *
     * $(&quot;.star_zoom&quot;).starZoom();
     * &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;
     *
     *&#x2F;
    
    (function($){
        var Events = {
            REDRAW: &quot;redraw&quot;,
            MOUSE_WHEEL: &quot;mousewheel&quot;,
            MOUSE_DOWN: &quot;mousedown&quot;,
            MOUSE_UP: &quot;mouseup&quot;,
            MOUSE_MOVE: &quot;mousemove&quot;
        };
        &#x2F;**
         * 类定义
         * @param options
         * @constructor
         *&#x2F;
        var StarZoom = function(options){
            this.$s = -1;  &#x2F;&#x2F;当前操作的imgDOM
            this.$wrapper = -1; this.$canvas = -1; this.$blank = -1;&#x2F;&#x2F;appended DOM object
            this.backgroundColor = &quot;white&quot;;&#x2F;&#x2F;canvas background
            this.ctx = -1; &#x2F;&#x2F;canvas context
            this.img = -1; this.ratio = 0;&#x2F;&#x2F;image dom  image ratio
            this.width = 0;this.height = 0; &#x2F;&#x2F;canvas width height
            this.mouseIsDown = false;
            this.ow = 0; this.oh = 0;&#x2F;&#x2F;image original width height
            this.sx = 0; this.sy = 0; this.sw=0; this.sh=0;this.dx=0; this.dy=0;&#x2F;&#x2F;drawImage()
            this.dw=0; this.dh=0;&#x2F;&#x2F;drawImage()
            this.mouseX = 0; this.mouseY = 0; &#x2F;&#x2F;mouse position
            this.zoomStep = 30;
            this.minWidth = 50;
            this.centerx = 0;this.centery = 0;
            this.olddw = 0; this.olddh = 0;
            this.degree = 0; &#x2F;&#x2F;旋转的角度
            this.btnRotateLeft = &#x27;.btn_rotate_left&#x27;;&#x2F;&#x2F;向左转class
            this.btnRotateRight = &#x27;.btn_rotate_right&#x27;;
            this.btnZoomIn = &#x27;.btn_zoom_in&#x27;; &#x2F;&#x2F;放大按钮
            this.btnZoomOut = &#x27;.btn_zoom_out&#x27;; &#x2F;&#x2F;缩小按钮
            this.initialize(options);
        };
        StarZoom.prototype = {
            initialize: function(options){
                var self = this;
                $.extend(this, options);
                self.img = new Image();
                self.img.onload = function(){
                    self.ow = self.img.width;
                    self.oh = self.img.height;
                    self.initDom();&#x2F;&#x2F;初始化所需DOM
                    self.bindEvents(); &#x2F;&#x2F;绑定相关事件
    
                    self.ctx = self.$canvas[0].getContext(&quot;2d&quot;);
                    self.initImage();&#x2F;&#x2F;初始化图片绘制
                }
                self.img.src = this.$s.attr(&quot;src&quot;);
            },
            bindEvents: function(){
                var self = this;
                &#x2F;&#x2F;空白层 mouse wheel down up move事件
                self.$blank.on(Events.MOUSE_WHEEL +&quot; &quot;+ Events.MOUSE_DOWN +&quot; &quot;+ Events.MOUSE_UP
                +&quot; &quot;+ Events.MOUSE_MOVE, function(e){
                    switch(e.type) {
                        case Events.MOUSE_MOVE:
                            self.handleBlankMouseMove(e);
                            break;
                        case Events.MOUSE_DOWN:
                            self.mouseX = e.pageX;
                            self.mouseY = e.pageY;
                            self.mouseIsDown = true;
                            self.$blank.css({cursor:&quot;move&quot;});
                            &#x2F;&#x2F;console.log(e.pageX - self.$canvas.offset().left);
                            break;
                        case Events.MOUSE_UP:
                            self.mouseIsDown = false;
                            self.$blank.css({cursor:&quot;auto&quot;});
                            break;
                        case Events.MOUSE_WHEEL:
                            e.preventDefault();
                            self.handleBlankMouseWheel(e);
                            break;
                    }
                });
                &#x2F;&#x2F;绑定重绘事件
                self.$canvas.bind(Events.REDRAW, function(){
                    self.ctx.fillStyle = self.backgroundColor;
                    self.ctx.fillRect(0,0,self.width,self.height); &#x2F;&#x2F;重置背景
                    self.getCenter();  &#x2F;&#x2F;获取图片中心在canvas上的坐标值
                    self.ctx.save();
                    self.ctx.translate(self.centerx, self.centery);&#x2F;&#x2F;参考点移动到图片中心
                    self.ctx.rotate(self.degree*Math.PI&#x2F;180);   &#x2F;&#x2F;旋转
                    self.ctx.translate(-self.centerx, -self.centery); &#x2F;&#x2F;重置参考点
                    self.ctx.drawImage(self.img, self.sx, self.sy, self.sw, self.sh,self.dx, self.dy, self.dw, self.dh);
                    self.ctx.restore();
                });
                var $parent = self.$s.parent();
                $parent.find(self.btnRotateLeft).on(&quot;click&quot;, function(){
                    self.degree -= 90;
                    self.redraw();
                });
                $parent.find(self.btnRotateRight).on(&quot;click&quot;, function(){
                    self.degree += 90;
                    self.redraw();
                });
                $parent.find(self.btnZoomIn).on(&quot;click&quot;, function(){
                    self.olddw = self.dw;
                    self.olddh = self.dh;
                    self.resizeByDelta(1, 0.5, 0.5);
                    self.redraw();
                });
                $parent.find(self.btnZoomOut).on(&quot;click&quot;, function(){
                    self.olddw = self.dw;
                    self.olddh = self.dh;
                    self.resizeByDelta(-1, 0.5, 0.5);
                    self.redraw();
                });
            },
            &#x2F;&#x2F;获取当前图片中心点坐标 相对canvas
            getCenter: function(){
                var self = this;
                self.centerx = self.dw&#x2F;2 + self.dx;
                self.centery = self.dh&#x2F;2 + self.dy;
            },
            &#x2F;&#x2F;初始化图片绘制
            initImage: function(){
                var self = this;
                self.ratio = self.ow&#x2F;self.oh;
                self.sh = self.oh; self.sw = self.ow;
                if(self.width &gt;= self.height){ &#x2F;&#x2F;显示区域宽大与高
                    self.initByHeight();
                    if(self.dw &gt; self.width){
                        self.initByWidth();
                    }
                }else{
                    self.initByWidth();
                    if(self.dh &gt; self.height){
                        self.initByHeight();
                    }
                }
                self.redraw();
                self.$canvas.stop(true,false).animate({opacity:1},1500,&#x27;linear&#x27;);
            },
            &#x2F;&#x2F;鼠标移动事件
            handleBlankMouseMove: function(e){
                var self = this;
                if(!self.mouseIsDown) return;
                self.dx += (e.pageX - self.mouseX );
                self.dy += (e.pageY - self.mouseY);
                self.mouseX = e.pageX;
                self.mouseY = e.pageY;
                self.redraw();
            },
            &#x2F;&#x2F;滚轮事件
            handleBlankMouseWheel: function(e){
                var self = this, delta, posx,posy,deltax=0.5, deltay=0.5;
                self.olddw = self.dw;
                self.olddh = self.dh;
                if(e.deltaY &gt; 0){delta = 1;}else{delta = -1;}
    
                posx = Math.abs(e.pageX - self.$canvas.offset().left - self.dx);
                posy = Math.abs(e.pageY - self.$canvas.offset().top - self.dy);
                deltax = posx&#x2F;self.olddw;
                deltay = posy&#x2F;self.olddh;
                self.resizeByDelta(delta, deltax, deltay);
                self.redraw();
            },
            resizeByDelta: function(delta, deltax, deltay){
                var self = this;
                self.dw += delta * self.zoomStep;
                self.dw = self.dw&lt;self.minWidth ? self.minWidth : self.dw;
                self.dh = self.dw&#x2F;self.ratio;
    
                self.dx -= delta*Math.abs(self.olddw-self.dw)*deltax;
                self.dy -= delta*Math.abs(self.olddh-self.dh)*deltay;
            },
            &#x2F;&#x2F;触发重绘事件
            redraw: function(){
                this.$canvas.trigger(Events.REDRAW);
            },
            &#x2F;&#x2F;以高为准定位图片位置
            initByHeight: function(){
                var self = this;
                self.dh = self.height;
                self.dw = self.dh * self.ratio;
                self.dy = 0;
                self.dx = (self.width-self.dw)&#x2F;2;
            },
            &#x2F;&#x2F;以宽为准定位
            initByWidth: function(){
                var self = this;
                self.dw = self.width;
                self.dh = self.dw&#x2F;self.ratio;
                self.dx = 0;
                self.dy = (self.height-self.dh)&#x2F;2;
            },
            &#x2F;&#x2F;初始化所需的DOM
            initDom: function(){
                var self = this;
                self.$wrapper = $(&#x27;&amp;lt;div class=&quot;star_zoom sw&quot;&amp;gt;&amp;lt;&#x2F;div&amp;gt;&#x27;);
                self.$canvas = $(&#x27;&amp;lt;canvas class=&quot;star_zoom sc&quot;&amp;gt;&amp;lt;&#x2F;canvas&amp;gt;&#x27;);
                self.$blank = $(&#x27;&amp;lt;div class=&quot;star_zoom sl&quot; unselectable=&quot;on&quot;&amp;gt;&amp;lt;&#x2F;div&amp;gt;&#x27;);
                self.$canvas.css({
                    position:&quot;absolute&quot;,top:0,left:0,zIndex:100, opacity:0
                }).attr({width:self.width,height:self.height}).appendTo(self.$wrapper);
                self.$blank.css({
                    width:self.width + &quot;px&quot;,height:self.height+&quot;px&quot;,position:&quot;absolute&quot;,top:0,left:0,zIndex:110
                }).appendTo(self.$wrapper);
                self.$wrapper.css({
                    width:self.width + &quot;px&quot;,height:self.height+&quot;px&quot;,overflow:&quot;hidden&quot;,position:&quot;relative&quot;
                }).appendTo(self.$s.css({display:&quot;none&quot;}).parent());
            }
        }
        &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;添加到jquery扩展
        $.fn.starZoom = function(args){
            $.each(this, function(i,n){
                var $s = $(n);
                var options = $s.data(&quot;options&quot;);
                options = !options?{}: $.parseJSON(options.replace(&#x2F;&#x27;&#x2F;ig, &quot;\&quot;&quot;));
                if(typeof(args) == &quot;object&quot;){
                    options = $.extend(args, options);
                }
                options.$s = $s;
                new StarZoom(options);
            });
            return this;
        }
    })(jQuery);

    &lt;&#x2F;code&gt;
&lt;&#x2F;pre&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>弹出层图片放大缩小ImageMoveable</title>
        <published>2014-06-21T00:00:00+00:00</published>
        <updated>2014-06-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="http://aqrun.com/frontend/dan-chu-ceng-tu-pian-fang-da-suo-xiao-imagemoveable/" type="text/html"/>
        <id>http://aqrun.com/frontend/dan-chu-ceng-tu-pian-fang-da-suo-xiao-imagemoveable/</id>
        
        <content type="html">&lt;pre class=&quot;line-numbers&quot;&gt;
    &lt;code class=&quot;language-javascript&quot;&gt;
    &#x2F;**
     * 弹出层图片放大缩小 ImageMoveable(selector)
     * ========================================
     *
     * 实现描述：点击页面相关dom出现弹出框进行相关图片缩放移动等细节查看
     * dependency:
     *    [jQuery](http:&#x2F;&#x2F;jquery.com&#x2F;)
     *    [underscore](http:&#x2F;&#x2F;underscorejs.org&#x2F;)
     *    [Backbone.js](http:&#x2F;&#x2F;backbonejs.org&#x2F;)
     *
     * author: MeanOfWind
     * QQ: 316841740
     * created time: 2014.6.12
     *
     *
     * dom标签属性：
     *    tagName: any
     *    id: any (not required)
     *    class: any 如果页面有多个图片处理传递class 程序会遍历所有的对象单独实例化
     *    src: any (not required)
     *    data-config: 配置选项 参数格式：为JSON格式 不加花括号 键名不加引号 键值如为字符串加单引号
     *            可选参数：
     *            width:  弹出框及图片宽 default 0
     *            height: 弹出框及图片高 default 0
     *            scale:  图片缩放比例   default 1&#x2F;8
     *            src:    图片url 如果是img标签存在src属性可不用指定
     *--------------------------------------------
     *
     * 函数调用示例:
     *
     *  (function($){
     *    $(function(){
     *      ImageMoveable( &quot;.img_moveable&quot; );
     *    })
     *  })(jQuery)
     *
     *
     * Tips:
     * 定点缩放 主要算法实现:
     * 缩放后图片位置(top)＝图片的当前位置(top) [+ 或 -] （鼠标按下时距图片左上角距离(disX)＊缩放因子(scale)）
     *
     *&#x2F;
    (function($, _, Backbone){
      &#x2F;&#x2F;弹出框样式
      var css = &#x27;.clear{clear:both;height:0;display:block}.imdia{z-index:1000;position:absolute;top:0;left:0}.imdia .dh{cursor:move;height:30px}.imdia .dh .dtit{margin:0;padding:0;display:block;float:left}.imdia .dh .btn{display:block;float:left;cursor:pointer;height:20px;line-height:20px;padding:0 10px;border-radius:3px;font-family:&quot;微软雅黑&quot;;font-size:14px;color:#fff;background-color:#0082cb;margin:5px 5px 0}.imdia .dh .btn.zoom{background-color:#ccccd1;opacity:.5}.imdia .dh .btn.active{background-color:#0082cb;opacity:1}.imdia .dh .close{float:right}.imdia .dcon{background-color:#fff;width:100px;height:50px;position:relative;overflow:hidden;border-shadow:10px 10px 5px #888}.imdia .dcon img{display:block;position:absolute;top:0;left:0}#imdiabg{display:block;width:100%;height:100%;background-color:#000;opacity:.7;position:fixed;z-index:900;top:0;left:0}&#x27;;
      var gnum = 0; &#x2F;&#x2F;保存当前实例序号 自加用于生成唯一ID
      var diaClassName = &quot;imdia&quot;;&#x2F;&#x2F; 弹出框class
      var bgid = diaClassName + &quot;bg&quot;; &#x2F;&#x2F;弹出框背景层ID
      var zoomIn = true;&#x2F;&#x2F;big 放大缩小控制
      &#x2F;**
       * 弹出框model
       * @type {*}
       *&#x2F;
      var DialogModel = Backbone.Model.extend({
        defaults:{
          id: &quot;dia_&quot;,
          width:0,
          height:0,
          diaheight: 0,
          marginLeft:0,
          marginTop:0,
          top:0,
          left:0
        },
        initialize: function(){
          var app = this.get(&quot;app&quot;);
          &#x2F;&#x2F;根据当前appid 设置相关参数
          this.set({id: this.get(&quot;id&quot;)+app.id});
          this.set({diaheight: (this.get(&quot;height&quot;) + 30)});
          this.setPosition();
        },
        setPosition: function(){
          var scrolltop = $(window).scrollTop();
          var winh = $(window).height();
          var top = winh&amp;gt;this.get(&quot;height&quot;)? ((winh-this.get(&quot;height&quot;))&#x2F;2) : scrolltop;
          var scrollleft = $(window).scrollLeft();
          var winw = $(window).width();
          var left = winw&amp;gt;this.get(&quot;width&quot;)? (winw-this.get(&quot;width&quot;))&#x2F;2 : scrollleft;
          this.set({top: top + scrolltop});
          this.set({left: left + scrollleft});
        }
      });
      &#x2F;**
       * 图片model
       * @type {*}
       *&#x2F;
      var ImageModel = Backbone.Model.extend({
        defaults: {
          id: &quot;img_&quot;,
          width:0,
          height:0,
          top:0,
          left:0,
          scale: 1&#x2F;8, &#x2F;&#x2F;
          src: &#x27;&#x27;
        },
        initialize: function(){
          var app = this.get(&quot;app&quot;);
          &#x2F;&#x2F;根据当前appid 设置相关参数
          this.set({id: this.get(&quot;id&quot;)+app.id});
          this.set({scale: eval(this.get(&quot;scale&quot;))});
        }
      });
      &#x2F;**
       * dialog view
       * @type {*}
       *&#x2F;
      var DialogView = Backbone.View.extend({
        tagName: &quot;div&quot;,
        className: diaClassName,
        mouseDown: false, &#x2F;&#x2F;鼠标是否按下
        mouseMove: false,
        disX: 0, &#x2F;&#x2F;鼠标按下位置和dialog left距离
        disY: 0,
        &#x2F;&#x2F;弹出框html模板
        template: &#x27;&amp;lt;div class=&quot;dh&quot;&amp;gt;\
                      &amp;lt;h4 class=&quot;dtit&quot;&amp;gt;&amp;lt;&#x2F;h4&amp;gt;\
                      &amp;lt;div class=&quot;btn zoom zoom_in active&quot;&amp;gt;放大&amp;lt;&#x2F;div&amp;gt;\
                      &amp;lt;div class=&quot;btn zoom zoom_out&quot;&amp;gt;缩小&amp;lt;&#x2F;div&amp;gt;\
                      &amp;lt;div class=&quot;btn close&quot;&amp;gt;关闭&amp;lt;&#x2F;div&amp;gt;&amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;&#x2F;div&amp;gt;\
                    &amp;lt;&#x2F;div&amp;gt;\
                    &amp;lt;div class=&quot;dcon&quot;&amp;gt;&amp;lt;&#x2F;div&amp;gt;\
                    &amp;lt;div class=&quot;db&quot;&amp;gt;&amp;lt;&#x2F;div&amp;gt;&amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;&#x2F;div&amp;gt;&#x27;,
        initialize: function(){
          _.bindAll(this, &quot;setPosition&quot;,&quot;dh_mousemove&quot;);
          this.listenTo(this.model,&quot;change&quot;,this.setPosition); &#x2F;&#x2F;监听model　change
          $(&quot;body&quot;).mousemove(this.dh_mousemove); &#x2F;&#x2F;绑定鼠标move事件
        },
        events: {
          &quot;click .close&quot;: &quot;diaClose&quot;,
          &quot;mousedown .dh&quot;: &quot;dh_mousedown&quot;,
          &quot;mouseup .dh&quot;: &quot;dh_mouseup&quot;,
          &quot;click .zoom_in&quot;: &quot;zoom_in&quot;,
          &quot;click .zoom_out&quot;: &quot;zoom_out&quot;
         &#x2F;&#x2F; &quot;mousemove .dh&quot;: &quot;dh_mousemove&quot;
        },
        render: function(){
          this.$el.attr(&quot;id&quot;,this.model.get(&quot;id&quot;));
          this.$el.html(this.template);
          this.$el.find(&quot;.dcon&quot;).append(this.model.get(&quot;app&quot;).imageView.el);
          this.$el.css({ &#x2F;&#x2F;dia 样式
            display:&quot;none&quot;,
            left: this.model.get(&quot;left&quot;)+ &quot;px&quot;,
            top: this.model.get(&quot;top&quot;) + &quot;px&quot;,
            width:this.model.get(&quot;width&quot;) + &quot;px&quot;,
            height: this.model.get(&quot;diaheight&quot;) + &quot;px&quot;
          });&#x2F;&#x2F;内容样式
          this.$el.find(&quot;.dcon&quot;).css({
            width:this.model.get(&quot;width&quot;) + &quot;px&quot;,
            height: this.model.get(&quot;height&quot;) + &quot;px&quot;
          });
          &#x2F;&#x2F;console.log(this)
          return this;
        },
        &#x2F;&#x2F;关闭
        diaClose: function(){
          this.hide();
        },
        show: function(){
          $(&quot;#&quot;+bgid).css(&quot;display&quot;,&quot;block&quot;);
          this.$el.show();
        },
        hide: function(){
          $(&quot;#&quot;+bgid).css(&quot;display&quot;,&quot;none&quot;);
          this.$el.hide();
        },
        setPosition: function(){
          this.$el.css({
            top: this.model.get(&quot;top&quot;) + &quot;px&quot;,
            left: this.model.get(&quot;left&quot;) + &quot;px&quot;
          });
        },
        &#x2F;&#x2F;处理托动
        dh_mousedown: function(e){
          this.mouseDown = true;
          this.disX = Math.abs(e.pageX - this.model.get(&quot;left&quot;));
          this.disY = Math.abs(e.pageY - this.model.get(&quot;top&quot;));
          &#x2F;&#x2F;console.log(this.disX);
          &#x2F;&#x2F;console.log(this.mouseDownX)
        },
        dh_mouseup: function(){
          this.mouseDown = false;
          this.mouseMove = false;
        },
        dh_mousemove: function(e){
          this.mouseMove = true;
          &#x2F;&#x2F;console.log(3)
          if(this.mouseDown){
            var x = e.pageX; &#x2F;&#x2F;当前鼠标位置
            var y = e.pageY;
            this.model.set({top: y-this.disY});
            this.model.set({left: x-this.disX});
            &#x2F;&#x2F;console.log(x-this.mouseDownX)
          }
        },
        &#x2F;&#x2F;放大
        zoom_in: function(e){
          zoomIn = true;&#x2F;&#x2F; 全局变量
          &#x2F;&#x2F;改变button class切换对应颜色
          this.$el.find(&quot;.zoom&quot;).removeClass(&quot;active&quot;);
          $(e.target).addClass(&quot;active&quot;);
        },
        &#x2F;&#x2F;缩小
        zoom_out: function(e){
          zoomIn = false;
          this.$el.find(&quot;.zoom&quot;).removeClass(&quot;active&quot;);
          $(e.target).addClass(&quot;active&quot;);
        }
      });
     
    
      &#x2F;**
       * 图片view类
       * @type {*}
       *&#x2F;
      var ImageView = Backbone.View.extend({
        tagName:&quot;img&quot;,
        disX:0,   &#x2F;&#x2F;鼠标按下时的点 离 图片左上角距离
        disY:0,
        dconX: 0,  &#x2F;&#x2F;图片外层div
        dconY: 0,
        mouseDown: false, &#x2F;&#x2F;鼠标没有按下
        mouseMove: false, &#x2F;&#x2F;鼠标没有移动
        initialize: function(){
          _.bindAll(this, &quot;img_mouse_move&quot;,&quot;setPosition&quot;);
          this.$el.attr({&#x2F;&#x2F;设置当前image  dom id及src值
            id: this.model.get(&quot;id&quot;),
            src: this.model.get(&#x27;src&#x27;)
          });
          this.$el.css({
            width: this.model.get(&quot;width&quot;) + &quot;px&quot;,
            height: this.model.get(&quot;height&quot;) + &quot;px&quot;
          });
          &#x2F;&#x2F;监听鼠标移动事件
          $(document).mousemove(this.img_mouse_move);
          this.listenTo(this.model,&quot;change&quot;,this.setPosition); &#x2F;&#x2F;监听model　change
        },
        render: function(){
          return this;
        },
        events: {
          &quot;mousedown&quot;: &quot;imgmousedown&quot;,&#x2F;&#x2F;鼠标按下
          &quot;mouseup&quot;: &quot;imgmouseup&quot;     &#x2F;&#x2F;鼠标弹起
        },
        &#x2F;&#x2F;鼠标按下具体处理
        imgmousedown: function(e){
          this.mouseDown = true;
          var $con = this.model.get(&quot;app&quot;).dialogView.$el.find(&quot;.dcon&quot;);
          &#x2F;&#x2F;dcon 左上角相对屏幕
          this.dconX = $con.offset().left;
          this.dconY = $con.offset().top;
          &#x2F;&#x2F;图片相对屏幕
          var imgY = this.$el.offset().top;
          var imgX = this.$el.offset().left;
          &#x2F;&#x2F;按下时鼠标位置
          var mouseX = e.pageX;
          var mouseY = e.pageY;
          &#x2F;&#x2F; 计算鼠标距离图片左上角距离
          this.disX = Math.abs(mouseX - imgX);
          this.disY = Math.abs(mouseY - imgY);
          &#x2F;&#x2F;console.log(disx);
          &#x2F;&#x2F;console.log(this.$el.offset())
        },
        &#x2F;**
         * 鼠标弹起事件具体处理
         * 如果鼠标按下并未移动则进行图片缩放操作
         *&#x2F;
        imgmouseup: function(){
          &#x2F;&#x2F;console.log(2)
          if(this.mouseDown &amp;amp;&amp;amp; !this.mouseMove){
            var w = this.model.get(&quot;width&quot;);&#x2F;&#x2F;图片当前尺寸
            var h = this.model.get(&quot;height&quot;);
            var scale = this.model.get(&quot;scale&quot;);  &#x2F;&#x2F;绽放比例
            var width, height,top=this.model.get(&quot;top&quot;),&#x2F;&#x2F;图片当前位置
                left=this.model.get(&quot;left&quot;);
            &#x2F;&#x2F;定点缩放 主要算法实现
            &#x2F;&#x2F;缩放后图片位置(top) ＝  图片的当前位置(top) [+ 或 -] （鼠标按下时距图片左上角距离(disX)＊缩放因子(scale)）
            if(zoomIn){ &#x2F;&#x2F;放大
              width = w+w*scale;
              height = h+h*scale;
              top = top - this.disY*scale;
              left = left - this.disX*scale;
            }else{
              width = w-w*scale;
              height = h-h*scale;
              top = top + this.disY*scale;
              left = left + this.disX*scale;
            }
            &#x2F;&#x2F;重设图片model数据
            this.model.set({
              &quot;width&quot;:width,
              &quot;height&quot;: height,
              top:top,
              left: left
            });
          }
          this.mouseDown = false;
          this.mouseMove = false;
        },
        &#x2F;&#x2F;鼠标移动具体处理
        img_mouse_move: function(e){
          var top,left;
          if(this.mouseDown){
            this.mouseMove = true;
            &#x2F;&#x2F;或取图片相对于容器div.dcon 的top left
            &#x2F;&#x2F;e.pageX: 事件触发时鼠标相对于document的坐标
            &#x2F;&#x2F;算法： 图片位置＝鼠标坐标－容器坐标－鼠标在当前图片坐标系的位置
            top = e.pageY - this.dconY - this.disY;
            left = e.pageX - this.dconX - this.disX;
            &#x2F;&#x2F;console.log(left)
            this.model.set({top: top});
            this.model.set({left: left});
          }
        },
        &#x2F;&#x2F;根据model值重设当前图片位置及尺寸
        setPosition: function(){
          this.$el.css({
            top: this.model.get(&quot;top&quot;) + &quot;px&quot;,
            left: this.model.get(&quot;left&quot;) + &quot;px&quot;,
            width: this.model.get(&quot;width&quot;) + &quot;px&quot;,
            height: this.model.get(&quot;height&quot;) + &quot;px&quot;
          });
        }
      });
    
      &#x2F;**
       * 主控制类 实例化相关资源
       * @type {*}
       *&#x2F;
      var App = Backbone.View.extend({
        initialize: function(options){
          _.bindAll(this,&quot;winScroll&quot;);
          this.id = &quot;g_img_idx_&quot; + gnum++; &#x2F;&#x2F;设置当前操作对象单一ＩＤ
          options.data.app = this;   &#x2F;&#x2F;当前引用到对应实例
          &#x2F;&#x2F;Model实例
          this.dialogModel = new DialogModel(options.data);  &#x2F;&#x2F;弹出框model
          this.imageModel = new ImageModel(options.data);  &#x2F;&#x2F;图片model
          &#x2F;&#x2F;View 实例化
          this.imageView = new ImageView({model:this.imageModel});&#x2F;&#x2F;图片view
          this.dialogView = new DialogView({model:this.dialogModel});
          &#x2F;&#x2F;console.log(options);
          &#x2F;&#x2F;console.log(this.imageView.render().el);
          &#x2F;&#x2F;console.log(this.el)
          $(window).scroll(this.winScroll);
          this.render();
        },
        render: function(){
          $(&quot;body&quot;).append(this.dialogView.render().el);
        },
        events:{
          &quot;click&quot;: &quot;elClick&quot;
        },
        &#x2F;&#x2F;当前对象点击
        elClick: function(){
          this.dialogView.show();
        },
        &#x2F;&#x2F;预留window sroll事件
        winScroll: function(){
          this.dialogModel.setPosition();
        }
      });
     
      &#x2F;&#x2F;工具函数
      &#x2F;&#x2F; parse data-config attr string to json
      function attrToJson(data_config){
        var arr = data_config.split(&quot;,&quot;); &#x2F;&#x2F;split to array
        for(var i = 0; i&amp;lt;arr add return add andd parse to json param selector constructor imagemoveable=&quot;function(selector){&quot; return foreach every selector the starter function var var data=&quot;attrToJson(data_config);&quot; var src=&quot;src;&quot; new bg mask var&amp;gt;&amp;lt;&#x2F;div&amp;gt;&quot;;
        var $css = &quot;&amp;lt;style&amp;gt;&quot;+ css +&quot;&amp;lt;&#x2F;style&amp;gt;&quot;;
        $(&quot;body&quot;).append(bg).append($css);&#x2F;&#x2F;添加弹出层背景 及对应CSS样式
      }
    })(jQuery, _, Backbone);
    
&lt;&#x2F;code&gt;
&lt;&#x2F;pre&gt;</content>
        
    </entry>
</feed>
